security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        register:
            pattern:  ^/register
            stateless: true
            anonymous: true

        api:
            pattern:  ^/api
            stateless: true
            anonymous: true
            provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_ADMIN }

        - { path: ^/api/pantheons, roles: IS_ADMIN, methods: [PUT, POST, DELETE] }
        - { path: ^/api/gods, roles: IS_ADMIN, methods: [PUT, POST, DELETE] }
        - { path: ^/api/heroes, roles: IS_ADMIN, methods: [PUT, POST, DELETE] }
        - { path: ^/api/monsters, roles: IS_ADMIN, methods: [PUT, POST, DELETE] }

        - { path: ^/api/character_types, roles: IS_ADMIN }
        - { path: ^/api/genders, roles: IS_ADMIN }
        - { path: ^/api/pantheons, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/gods, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/heroes, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/monsters, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api, roles: IS_ADMIN }